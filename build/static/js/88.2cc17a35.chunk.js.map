{"version":3,"file":"static/js/88.2cc17a35.chunk.js","mappings":"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","sources":["components/charImage/CharImage.js","components/comicsItems/ComicsItems.js","components/appBanner/AppBanner.js","components/pages/ComicsPage.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"sourcesContent":["const CharImage = ({alt = null, src = null, className = null}) => {\r\n    if (src === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n        return <img src={src} style={{objectFit: 'fill'}} alt={alt} className={className}/>;\r\n    }\r\n    return <img src={src} style={{objectFit: 'cover'}} alt={alt} className={className}/>;\r\n};\r\n\r\nexport default CharImage;","import { useEffect, useState } from 'react';\r\n\r\nimport CharImage from '../charImage/CharImage';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport useMarvelService from '../../services/MarvelService';\r\n\r\nimport comicsItemImg from '../../resources/img/UW.png';\r\n\r\nimport './comicsItems.scss';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst setContent = (process, Component, newItemLoading) => {\r\n    switch (process) {\r\n        case 'waiting':\r\n            return <Spinner/>;\r\n            break;\r\n        case 'loading':\r\n            return newItemLoading ? <Component/> : <Spinner/>;\r\n            break;\r\n        case 'confirmed': \r\n            return <Component/>;\r\n            break;\r\n        case 'error':\r\n            return <ErrorMessage/>;\r\n            break;\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n    }\r\n};\r\n\r\n\r\nconst ComicsItems = () => {\r\n    const [comics, setComics]                 = useState([]);\r\n    const [newItemLoading, setNewItemLoading] = useState(false);\r\n    const [offset, setOffset]                 = useState(1544);\r\n    const [comicsEnded, setComicsEnded]       = useState(false);\r\n\r\n    const {loading, error, getAllComics, process, setProcess} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        onRequest(offset, true);\r\n    }, [])\r\n\r\n    const onRequest = (offset, initial) => {\r\n        initial ? setNewItemLoading(false) : setNewItemLoading(true)\r\n        getAllComics(offset)\r\n            .then(onComicsListLoaded)\r\n            .then(() => setProcess('confirmed'));\r\n    }\r\n\r\n    const onComicsListLoaded = (newComics) => {\r\n        let ended = false;\r\n        if (newComics.length < 8) {\r\n            ended = true;\r\n        }\r\n\r\n\r\n        setComics(comics => [...comics, ...newComics]);\r\n        setNewItemLoading(newItemLoading => false);\r\n        setOffset(offset => offset + 8);\r\n        setComicsEnded(comicsEnded => ended);\r\n    }\r\n\r\n\r\n    const setAllComics = (comics) => {\r\n        if (comics.length > 0) {\r\n            const comicsArr = comics.map((item, i) => {\r\n                return (\r\n                    <Link to={`/comics/${item.id}`}>\r\n                        <li className='comicsItems__item'\r\n                            key={item.id}>\r\n                            <img src={item.thumbnail} alt=\"item\"/>\r\n                            <h2 className=\"comicsItems__title\">{item.name}</h2>\r\n                            <h2 className=\"comicsItems__price\">{item.price}</h2>\r\n                        </li>\r\n                    </Link>\r\n                )\r\n            });\r\n\r\n            return (<ul className=\"comicsItems__grid\" style={+window.innerWidth <= 576 ? {width: window.innerWidth - +'20'}: {width: 'auto'}}>\r\n                        {[...comicsArr]}\r\n                    </ul>)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"comicsItems\">\r\n            {setContent(process, () => setAllComics(comics), newItemLoading)} \r\n            <button \r\n                className=\"button button__main button__long\"\r\n                disabled={newItemLoading} \r\n                style={{display: comicsEnded ? 'none' : 'block'}}\r\n                onClick={() => onRequest(offset)}>\r\n                <div className=\"inner\">load more</div>\r\n            </button>\r\n        </div>\r\n    ) \r\n}\r\n\r\nexport default ComicsItems;","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import ComicsItems from \"../comicsItems/ComicsItems\";\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\n\r\nconst ComicsPage = () => {\r\n    return (\r\n        <>\r\n            <AppBanner/>\r\n            <ComicsItems/>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default ComicsPage;\r\n","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["_ref","_ref$alt","alt","_ref$src","src","_ref$className","className","_jsx","style","objectFit","setContent","process","Component","newItemLoading","Spinner","ErrorMessage","Error","_useState","useState","_useState2","_slicedToArray","comics","setComics","_useState3","_useState4","setNewItemLoading","_useState5","_useState6","offset","setOffset","_useState7","_useState8","comicsEnded","setComicsEnded","_useMarvelService","useMarvelService","getAllComics","loading","error","setProcess","useEffect","onRequest","initial","then","onComicsListLoaded","newComics","ended","length","concat","_toConsumableArray","_jsxs","children","comicsArr","map","item","i","Link","to","id","thumbnail","name","price","window","innerWidth","width","setAllComics","disabled","display","onClick","avengers","avengersLogo","_Fragment","AppBanner","ComicsItems","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","from","unsupportedIterableToArray","TypeError"],"sourceRoot":""}